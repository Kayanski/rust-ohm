{
  "contract_name": "bond",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Message type for `instantiate` entry_point",
    "type": "object",
    "required": [
      "epoch_apr",
      "epoch_length",
      "first_epoch_time",
      "initial_balances"
    ],
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "epoch_apr": {
        "$ref": "#/definitions/Decimal256"
      },
      "epoch_length": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "first_epoch_time": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "initial_balances": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Uint128"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal256": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Message type for `execute` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "stake"
        ],
        "properties": {
          "stake": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "to"
            ],
            "properties": {
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "rebase"
        ],
        "properties": {
          "rebase": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "amount",
              "to"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "admin": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "epoch_apr": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal256"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "epoch_length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Decimal256": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Message type for `query` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "exchange_rate"
        ],
        "properties": {
          "exchange_rate": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "Message type for `migrate` entry_point",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "admin",
        "epoch_apr",
        "epoch_length",
        "ohm",
        "sohm"
      ],
      "properties": {
        "admin": {
          "type": "string"
        },
        "epoch_apr": {
          "$ref": "#/definitions/Decimal256"
        },
        "epoch_length": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ohm": {
          "type": "string"
        },
        "sohm": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal256": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "exchange_rate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Decimal256",
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
      "type": "string"
    }
  }
}
